
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 11 22:47:17 CET 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 11 22:47:17 CET 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\073\002\000\002\002" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\006" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\074\002\000\002\004\010\000\002\075\002\000\002" +
    "\004\010\000\002\076\002\000\002\004\010\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\006\003\000\002\006\004" +
    "\000\002\007\010\000\002\025\003\000\002\025\003\000" +
    "\002\026\003\000\002\026\003\000\002\010\003\000\002" +
    "\010\004\000\002\013\010\000\002\011\004\000\002\011" +
    "\003\000\002\012\006\000\002\012\006\000\002\014\005" +
    "\000\002\014\003\000\002\024\005\000\002\016\003\000" +
    "\002\016\004\000\002\015\003\000\002\015\005\000\002" +
    "\017\006\000\002\017\006\000\002\021\003\000\002\021" +
    "\004\000\002\070\003\000\002\070\003\000\002\030\014" +
    "\000\002\030\015\000\002\030\015\000\002\030\016\000" +
    "\002\077\002\000\002\030\015\000\002\031\003\000\002" +
    "\031\005\000\002\044\003\000\002\044\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\006\000\002\034\006" +
    "\000\002\043\003\000\002\043\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\047\004\000\002\047" +
    "\003\000\002\063\006\000\002\071\002\000\002\071\003" +
    "\000\002\071\005\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\020\013\000\002\020\012\000\002\020" +
    "\014\000\002\020\013\000\002\020\011\000\002\020\012" +
    "\000\002\020\012\000\002\020\013\000\002\064\003\000" +
    "\002\064\004\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\054" +
    "\007\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\051\003\000\002\045\003\000\002\045\004\000\002" +
    "\035\003\000\002\035\003\000\002\022\003\000\002\022" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\006\000" +
    "\002\037\006\000\002\037\006\000\002\037\006\000\002" +
    "\037\006\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\057\005\000\002\057\005\000\002\052\011\000" +
    "\002\052\013\000\002\053\011\000\002\066\003\000\002" +
    "\066\004\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\004\000\002\067\003" +
    "\000\002\067\005\000\002\067\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\040" +
    "\005\000\002\040\005\000\002\041\003\000\002\041\003" +
    "\000\002\042\003\000\002\042\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\036" +
    "\006\000\002\036\003\000\002\032\005\000\002\056\005" +
    "\000\002\056\007\000\002\056\007\000\002\056\005\000" +
    "\002\056\005\000\002\055\003\000\002\055\003\000\002" +
    "\027\003\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\004\037\000\001\002\000\004\002\u015b\001" +
    "\002\000\004\037\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\u014b\014\u014c\001\002\000\014\014\022\023" +
    "\026\031\025\037\014\045\016\001\002\000\014\014\022" +
    "\023\ufff2\031\025\037\014\045\016\001\002\000\014\014" +
    "\254\023\ufff1\031\025\037\014\045\016\001\002\000\010" +
    "\023\uffca\031\uffca\037\uffca\001\002\000\004\014\u011c\001" +
    "\002\000\014\014\uffe3\023\uffe3\031\uffe3\037\uffe3\045\uffe3" +
    "\001\002\000\004\014\u010b\001\002\000\010\023\uffc9\031" +
    "\uffc9\037\uffc9\001\002\000\014\014\uffdc\023\uffdc\031\uffdc" +
    "\037\uffdc\045\uffdc\001\002\000\010\023\uffcc\031\uffcc\037" +
    "\uffcc\001\002\000\006\007\u0104\011\260\001\002\000\010" +
    "\023\uffef\031\025\037\014\001\002\000\012\014\uffd0\023" +
    "\uffd0\031\uffd0\037\uffd0\001\002\000\004\014\274\001\002" +
    "\000\016\014\045\027\050\032\043\040\035\042\047\046" +
    "\034\001\002\000\012\014\254\023\ufff0\031\025\037\014" +
    "\001\002\000\012\014\uffd2\023\uffd2\031\uffd2\037\uffd2\001" +
    "\002\000\004\023\032\001\002\000\016\014\045\027\050" +
    "\032\043\040\035\042\047\046\034\001\002\000\020\003" +
    "\uff87\014\uff87\027\uff87\032\uff87\040\uff87\042\uff87\046\uff87" +
    "\001\002\000\014\004\151\014\155\016\100\030\154\044" +
    "\152\001\002\000\004\004\233\001\002\000\020\003\uff89" +
    "\014\uff89\027\uff89\032\uff89\040\uff89\042\uff89\046\uff89\001" +
    "\002\000\004\002\ufffc\001\002\000\020\003\uff86\014\uff86" +
    "\027\uff86\032\uff86\040\uff86\042\uff86\046\uff86\001\002\000" +
    "\020\003\231\014\045\027\050\032\043\040\035\042\047" +
    "\046\034\001\002\000\004\010\215\001\002\000\014\004" +
    "\151\014\155\016\100\030\154\044\152\001\002\000\020" +
    "\003\uff85\014\uff85\027\uff85\032\uff85\040\uff85\042\uff85\046" +
    "\uff85\001\002\000\010\007\106\010\105\017\064\001\002" +
    "\000\020\003\uff8b\014\uff8b\027\uff8b\032\uff8b\040\uff8b\042" +
    "\uff8b\046\uff8b\001\002\000\012\014\062\016\060\030\061" +
    "\044\057\001\002\000\004\014\052\001\002\000\020\003" +
    "\uff88\014\uff88\027\uff88\032\uff88\040\uff88\042\uff88\046\uff88" +
    "\001\002\000\004\006\053\001\002\000\030\002\uffd3\003" +
    "\uffd3\014\uffd3\023\uffd3\027\uffd3\031\uffd3\032\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\046\uffd3\001\002\000\024\005\uff5b\006" +
    "\uff5b\012\uff5b\013\uff5b\020\uff5b\021\uff5b\022\uff5b\035\uff5b" +
    "\043\uff5b\001\002\000\012\012\076\013\074\020\073\021" +
    "\071\001\002\000\004\006\070\001\002\000\006\005\uffde" +
    "\006\uffde\001\002\000\014\006\067\012\uff5c\013\uff5c\020" +
    "\uff5c\021\uff5c\001\002\000\006\005\uffdd\006\uffdd\001\002" +
    "\000\016\006\063\012\uff5d\013\uff5d\017\064\020\uff5d\021" +
    "\uff5d\001\002\000\024\003\uff53\014\uff53\026\uff53\027\uff53" +
    "\032\uff53\037\uff53\040\uff53\042\uff53\046\uff53\001\002\000" +
    "\004\014\066\001\002\000\030\005\uff78\006\uff78\010\uff78" +
    "\011\uff78\012\uff78\013\uff78\020\uff78\021\uff78\022\uff78\035" +
    "\uff78\043\uff78\001\002\000\032\005\uff79\006\uff79\010\uff79" +
    "\011\uff79\012\uff79\013\uff79\017\064\020\uff79\021\uff79\022" +
    "\uff79\035\uff79\043\uff79\001\002\000\024\003\uff50\014\uff50" +
    "\026\uff50\027\uff50\032\uff50\037\uff50\040\uff50\042\uff50\046" +
    "\uff50\001\002\000\024\003\uff4f\014\uff4f\026\uff4f\027\uff4f" +
    "\032\uff4f\037\uff4f\040\uff4f\042\uff4f\046\uff4f\001\002\000" +
    "\006\014\uff60\016\uff60\001\002\000\006\014\101\016\100" +
    "\001\002\000\006\014\uff61\016\uff61\001\002\000\006\014" +
    "\uff5f\016\uff5f\001\002\000\006\014\101\016\100\001\002" +
    "\000\006\014\uff5e\016\uff5e\001\002\000\004\006\102\001" +
    "\002\000\020\005\uff5c\006\uff5c\020\uff5c\021\uff5c\022\uff5c" +
    "\035\uff5c\043\uff5c\001\002\000\016\005\uff5d\006\uff5d\017" +
    "\064\022\uff5d\035\uff5d\043\uff5d\001\002\000\024\003\uff52" +
    "\014\uff52\026\uff52\027\uff52\032\uff52\037\uff52\040\uff52\042" +
    "\uff52\046\uff52\001\002\000\004\006\104\001\002\000\024" +
    "\003\uff51\014\uff51\026\uff51\027\uff51\032\uff51\037\uff51\040" +
    "\uff51\042\uff51\046\uff51\001\002\000\012\014\115\016\111" +
    "\030\061\044\057\001\002\000\004\025\107\001\002\000" +
    "\004\003\110\001\002\000\020\003\uff84\014\uff84\027\uff84" +
    "\032\uff84\040\uff84\042\uff84\046\uff84\001\002\000\014\006" +
    "\150\012\uff5c\013\uff5c\020\uff5c\021\uff5c\001\002\000\014" +
    "\006\147\012\uff5b\013\uff5b\020\uff5b\021\uff5b\001\002\000" +
    "\012\012\076\013\074\020\073\021\071\001\002\000\004" +
    "\006\136\001\002\000\016\004\122\012\uff5d\013\uff5d\017" +
    "\064\020\uff5d\021\uff5d\001\002\000\004\006\121\001\002" +
    "\000\004\006\120\001\002\000\024\003\uff82\014\uff82\026" +
    "\uff82\027\uff82\032\uff82\037\uff82\040\uff82\042\uff82\046\uff82" +
    "\001\002\000\024\003\uff81\014\uff81\026\uff81\027\uff81\032" +
    "\uff81\037\uff81\040\uff81\042\uff81\046\uff81\001\002\000\012" +
    "\005\uffaf\014\130\015\126\016\124\001\002\000\004\005" +
    "\135\001\002\000\016\005\uffa9\011\uffa9\012\uff5c\013\uff5c" +
    "\020\uff5c\021\uff5c\001\002\000\016\005\uffa8\011\uffa8\012" +
    "\uff5b\013\uff5b\020\uff5b\021\uff5b\001\002\000\006\005\uffaa" +
    "\011\uffaa\001\002\000\006\005\uffac\011\uffac\001\002\000" +
    "\022\004\122\005\uffab\011\uffab\012\uff5d\013\uff5d\017\064" +
    "\020\uff5d\021\uff5d\001\002\000\006\005\uffa7\011\uffa7\001" +
    "\002\000\006\005\uffae\011\133\001\002\000\012\005\uffaf" +
    "\014\130\015\126\016\124\001\002\000\004\005\uffad\001" +
    "\002\000\016\005\uffb0\006\uffb0\011\uffb0\022\uffb0\035\uffb0" +
    "\043\uffb0\001\002\000\024\003\uff83\014\uff83\026\uff83\027" +
    "\uff83\032\uff83\037\uff83\040\uff83\042\uff83\046\uff83\001\002" +
    "\000\006\014\145\016\144\001\002\000\006\014\145\016" +
    "\144\001\002\000\010\005\uff57\006\uff57\011\uff57\001\002" +
    "\000\010\005\uff58\006\uff58\011\uff58\001\002\000\010\005" +
    "\uff63\006\uff63\011\uff63\001\002\000\010\005\uff59\006\uff59" +
    "\011\uff59\001\002\000\014\004\122\005\uff5a\006\uff5a\011" +
    "\uff5a\017\064\001\002\000\010\005\uff62\006\uff62\011\uff62" +
    "\001\002\000\024\003\uff7f\014\uff7f\026\uff7f\027\uff7f\032" +
    "\uff7f\037\uff7f\040\uff7f\042\uff7f\046\uff7f\001\002\000\024" +
    "\003\uff80\014\uff80\026\uff80\027\uff80\032\uff80\037\uff80\040" +
    "\uff80\042\uff80\046\uff80\001\002\000\014\004\151\014\155" +
    "\016\100\030\154\044\152\001\002\000\012\005\uff6a\022" +
    "\uff6a\035\uff6a\043\uff6a\001\002\000\006\020\073\021\071" +
    "\001\002\000\012\005\uff69\022\uff69\035\uff69\043\uff69\001" +
    "\002\000\022\004\122\005\uff68\017\064\020\uff5d\021\uff5d" +
    "\022\uff68\035\uff68\043\uff68\001\002\000\006\022\160\043" +
    "\161\001\002\000\012\005\uff67\022\uff67\035\uff67\043\uff67" +
    "\001\002\000\014\004\151\014\155\016\100\030\154\044" +
    "\152\001\002\000\016\003\170\014\171\032\043\040\035" +
    "\042\047\046\034\001\002\000\022\003\uff70\014\uff70\026" +
    "\uff70\027\uff70\032\uff70\040\uff70\042\uff70\046\uff70\001\002" +
    "\000\022\003\uff72\014\uff72\026\uff72\027\uff72\032\uff72\040" +
    "\uff72\042\uff72\046\uff72\001\002\000\022\003\170\014\171" +
    "\026\177\027\201\032\043\040\035\042\047\046\034\001" +
    "\002\000\022\003\uff6f\014\uff6f\026\uff6f\027\uff6f\032\uff6f" +
    "\040\uff6f\042\uff6f\046\uff6f\001\002\000\022\003\uff6d\014" +
    "\uff6d\026\uff6d\027\uff6d\032\uff6d\040\uff6d\042\uff6d\046\uff6d" +
    "\001\002\000\022\003\uff74\014\uff74\026\uff74\027\uff74\032" +
    "\uff74\040\uff74\042\uff74\046\uff74\001\002\000\022\003\uff6b" +
    "\014\uff6b\026\uff6b\027\uff6b\032\uff6b\040\uff6b\042\uff6b\046" +
    "\uff6b\001\002\000\012\004\122\007\175\010\105\017\064" +
    "\001\002\000\004\006\174\001\002\000\022\003\uff71\014" +
    "\uff71\026\uff71\027\uff71\032\uff71\040\uff71\042\uff71\046\uff71" +
    "\001\002\000\022\003\uff6e\014\uff6e\026\uff6e\027\uff6e\032" +
    "\uff6e\040\uff6e\042\uff6e\046\uff6e\001\002\000\004\025\176" +
    "\001\002\000\022\003\uff6c\014\uff6c\026\uff6c\027\uff6c\032" +
    "\uff6c\040\uff6c\042\uff6c\046\uff6c\001\002\000\016\003\170" +
    "\014\171\032\043\040\035\042\047\046\034\001\002\000" +
    "\022\003\uff73\014\uff73\026\uff73\027\uff73\032\uff73\040\uff73" +
    "\042\uff73\046\uff73\001\002\000\004\032\202\001\002\000" +
    "\004\006\203\001\002\000\024\003\uff77\014\uff77\026\uff77" +
    "\027\uff77\032\uff77\037\uff77\040\uff77\042\uff77\046\uff77\001" +
    "\002\000\020\003\170\014\171\027\205\032\043\040\035" +
    "\042\047\046\034\001\002\000\004\032\206\001\002\000" +
    "\004\006\207\001\002\000\024\003\uff76\014\uff76\026\uff76" +
    "\027\uff76\032\uff76\037\uff76\040\uff76\042\uff76\046\uff76\001" +
    "\002\000\012\005\uff64\022\uff64\035\uff64\043\uff64\001\002" +
    "\000\006\014\101\016\100\001\002\000\012\005\uff66\022" +
    "\uff66\035\uff66\043\uff66\001\002\000\006\005\214\022\160" +
    "\001\002\000\012\005\uff65\022\uff65\035\uff65\043\uff65\001" +
    "\002\000\012\014\115\016\216\030\061\044\057\001\002" +
    "\000\014\006\227\012\uff5c\013\uff5c\020\uff5c\021\uff5c\001" +
    "\002\000\014\006\226\012\uff5b\013\uff5b\020\uff5b\021\uff5b" +
    "\001\002\000\004\006\225\001\002\000\004\006\224\001" +
    "\002\000\004\006\223\001\002\000\024\003\uff7d\014\uff7d" +
    "\026\uff7d\027\uff7d\032\uff7d\037\uff7d\040\uff7d\042\uff7d\046" +
    "\uff7d\001\002\000\024\003\uff7c\014\uff7c\026\uff7c\027\uff7c" +
    "\032\uff7c\037\uff7c\040\uff7c\042\uff7c\046\uff7c\001\002\000" +
    "\024\003\uff7e\014\uff7e\026\uff7e\027\uff7e\032\uff7e\037\uff7e" +
    "\040\uff7e\042\uff7e\046\uff7e\001\002\000\024\003\uff7a\014" +
    "\uff7a\026\uff7a\027\uff7a\032\uff7a\037\uff7a\040\uff7a\042\uff7a" +
    "\046\uff7a\001\002\000\024\003\uff7b\014\uff7b\026\uff7b\027" +
    "\uff7b\032\uff7b\037\uff7b\040\uff7b\042\uff7b\046\uff7b\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\ufffa\001\002\000" +
    "\020\003\uff8a\014\uff8a\027\uff8a\032\uff8a\040\uff8a\042\uff8a" +
    "\046\uff8a\001\002\000\016\003\241\014\242\015\237\016" +
    "\235\030\061\044\057\001\002\000\004\005\244\001\002" +
    "\000\014\005\uff94\012\uff5c\013\uff5c\020\uff5c\021\uff5c\001" +
    "\002\000\014\005\uff91\012\uff5b\013\uff5b\020\uff5b\021\uff5b" +
    "\001\002\000\004\005\uff95\001\002\000\004\005\uff93\001" +
    "\002\000\004\005\uff90\001\002\000\016\005\uff96\012\uff5d" +
    "\013\uff5d\017\064\020\uff5d\021\uff5d\001\002\000\004\005" +
    "\uff92\001\002\000\004\006\245\001\002\000\024\003\uff97" +
    "\014\uff97\026\uff97\027\uff97\032\uff97\037\uff97\040\uff97\042" +
    "\uff97\046\uff97\001\002\000\006\022\160\035\247\001\002" +
    "\000\016\003\170\014\171\032\043\040\035\042\047\046" +
    "\034\001\002\000\020\003\170\014\171\027\251\032\043" +
    "\040\035\042\047\046\034\001\002\000\004\035\252\001" +
    "\002\000\004\006\253\001\002\000\024\003\uff75\014\uff75" +
    "\026\uff75\027\uff75\032\uff75\037\uff75\040\uff75\042\uff75\046" +
    "\uff75\001\002\000\006\007\261\011\260\001\002\000\010" +
    "\023\uffe9\031\025\037\014\001\002\000\012\014\uffd1\023" +
    "\uffd1\031\uffd1\037\uffd1\001\002\000\010\023\uffcb\031\uffcb" +
    "\037\uffcb\001\002\000\004\014\254\001\002\000\010\014" +
    "\264\024\265\033\262\001\002\000\012\005\uff4c\006\uff4c" +
    "\011\uff4c\034\uff4c\001\002\000\004\006\267\001\002\000" +
    "\004\006\266\001\002\000\012\005\uff4b\006\uff4b\011\uff4b" +
    "\034\uff4b\001\002\000\012\014\uffce\023\uffce\031\uffce\037" +
    "\uffce\001\002\000\012\014\uffcd\023\uffcd\031\uffcd\037\uffcd" +
    "\001\002\000\012\014\uffcf\023\uffcf\031\uffcf\037\uffcf\001" +
    "\002\000\004\002\ufffe\001\002\000\016\014\045\027\050" +
    "\032\043\040\035\042\047\046\034\001\002\000\004\002" +
    "\ufffd\001\002\000\006\003\276\004\275\001\002\000\006" +
    "\005\341\014\342\001\002\000\004\042\uffc4\001\002\000" +
    "\004\042\300\001\002\000\006\024\265\033\262\001\002" +
    "\000\004\034\302\001\002\000\010\003\305\014\306\037" +
    "\014\001\002\000\022\003\uff8f\014\uff8f\023\uff8f\032\uff8f" +
    "\037\uff8f\040\uff8f\042\uff8f\046\uff8f\001\002\000\022\003" +
    "\uff8d\014\uff8d\023\uff8d\032\uff8d\037\uff8d\040\uff8d\042\uff8d" +
    "\046\uff8d\001\002\000\022\003\uff55\014\uff55\023\uff55\032" +
    "\uff55\037\uff55\040\uff55\042\uff55\046\uff55\001\002\000\004" +
    "\007\334\001\002\000\022\003\uff8c\014\uff8c\023\uff8c\032" +
    "\uff8c\037\uff8c\040\uff8c\042\uff8c\046\uff8c\001\002\000\012" +
    "\003\305\014\306\023\312\037\014\001\002\000\022\003" +
    "\uff8e\014\uff8e\023\uff8e\032\uff8e\037\uff8e\040\uff8e\042\uff8e" +
    "\046\uff8e\001\002\000\016\014\323\032\043\037\014\040" +
    "\035\042\047\046\034\001\002\000\020\014\uffba\027\uffba" +
    "\032\uffba\037\uffba\040\uffba\042\uffba\046\uffba\001\002\000" +
    "\020\014\uffb4\027\uffb4\032\uffb4\037\uffb4\040\uffb4\042\uffb4" +
    "\046\uffb4\001\002\000\020\014\323\027\330\032\043\037" +
    "\014\040\035\042\047\046\034\001\002\000\020\014\uffb1" +
    "\027\uffb1\032\uffb1\037\uffb1\040\uffb1\042\uffb1\046\uffb1\001" +
    "\002\000\020\014\uffb3\027\uffb3\032\uffb3\037\uffb3\040\uffb3" +
    "\042\uffb3\046\uffb3\001\002\000\020\014\uffb6\027\uffb6\032" +
    "\uffb6\037\uffb6\040\uffb6\042\uffb6\046\uffb6\001\002\000\020" +
    "\014\uffb5\027\uffb5\032\uffb5\037\uffb5\040\uffb5\042\uffb5\046" +
    "\uffb5\001\002\000\020\014\uffb7\027\uffb7\032\uffb7\037\uffb7" +
    "\040\uffb7\042\uffb7\046\uffb7\001\002\000\010\004\122\010" +
    "\105\017\064\001\002\000\004\006\326\001\002\000\020" +
    "\014\uffb8\027\uffb8\032\uffb8\037\uffb8\040\uffb8\042\uffb8\046" +
    "\uffb8\001\002\000\020\014\uffb2\027\uffb2\032\uffb2\037\uffb2" +
    "\040\uffb2\042\uffb2\046\uffb2\001\002\000\010\023\uffc3\031" +
    "\uffc3\037\uffc3\001\002\000\004\014\332\001\002\000\020" +
    "\014\uffb9\027\uffb9\032\uffb9\037\uffb9\040\uffb9\042\uffb9\046" +
    "\uffb9\001\002\000\004\006\333\001\002\000\010\023\uff54" +
    "\031\uff54\037\uff54\001\002\000\006\024\265\033\262\001" +
    "\002\000\004\006\336\001\002\000\022\003\uff56\014\uff56" +
    "\023\uff56\032\uff56\037\uff56\040\uff56\042\uff56\046\uff56\001" +
    "\002\000\004\005\uffc2\001\002\000\006\005\uffc0\011\u0101" +
    "\001\002\000\004\042\367\001\002\000\006\007\360\011" +
    "\357\001\002\000\004\005\344\001\002\000\004\042\345" +
    "\001\002\000\006\024\265\033\262\001\002\000\004\034" +
    "\347\001\002\000\012\003\305\014\306\023\350\037\014" +
    "\001\002\000\016\014\323\032\043\037\014\040\035\042" +
    "\047\046\034\001\002\000\012\003\305\014\306\023\352" +
    "\037\014\001\002\000\016\014\323\032\043\037\014\040" +
    "\035\042\047\046\034\001\002\000\020\014\323\027\330" +
    "\032\043\037\014\040\035\042\047\046\034\001\002\000" +
    "\010\023\uffc5\031\uffc5\037\uffc5\001\002\000\020\014\323" +
    "\027\330\032\043\037\014\040\035\042\047\046\034\001" +
    "\002\000\010\023\uffc6\031\uffc6\037\uffc6\001\002\000\004" +
    "\014\342\001\002\000\012\014\363\024\265\033\262\036" +
    "\361\001\002\000\010\014\365\024\265\033\262\001\002" +
    "\000\006\005\uffbd\011\uffbd\001\002\000\006\005\uffbe\011" +
    "\uffbe\001\002\000\006\005\uffbb\011\uffbb\001\002\000\006" +
    "\005\uffbc\011\uffbc\001\002\000\004\005\uffc1\001\002\000" +
    "\006\024\265\033\262\001\002\000\004\034\371\001\002" +
    "\000\012\003\305\014\306\023\372\037\014\001\002\000" +
    "\016\014\323\032\043\037\014\040\035\042\047\046\034" +
    "\001\002\000\012\003\305\014\306\023\374\037\014\001" +
    "\002\000\016\014\323\032\043\037\014\040\035\042\047" +
    "\046\034\001\002\000\020\014\323\027\330\032\043\037" +
    "\014\040\035\042\047\046\034\001\002\000\010\023\uffc7" +
    "\031\uffc7\037\uffc7\001\002\000\020\014\323\027\330\032" +
    "\043\037\014\040\035\042\047\046\034\001\002\000\010" +
    "\023\uffc8\031\uffc8\037\uffc8\001\002\000\004\014\u0103\001" +
    "\002\000\004\005\uffbf\001\002\000\004\007\360\001\002" +
    "\000\012\014\264\024\265\025\u0105\033\262\001\002\000" +
    "\004\010\u0106\001\002\000\010\016\u0109\030\061\044\057" +
    "\001\002\000\004\006\u010a\001\002\000\004\006\uffdf\001" +
    "\002\000\004\006\uffe0\001\002\000\014\014\uffe1\023\uffe1" +
    "\031\uffe1\037\uffe1\045\uffe1\001\002\000\004\034\u010c\001" +
    "\002\000\004\041\u010d\001\002\000\004\014\u010e\001\002" +
    "\000\004\007\u0117\001\002\000\006\003\u0112\027\u0113\001" +
    "\002\000\010\003\uffd8\014\u010e\027\uffd8\001\002\000\006" +
    "\003\uffd9\027\uffd9\001\002\000\014\014\uffd4\023\uffd4\031" +
    "\uffd4\037\uffd4\045\uffd4\001\002\000\004\041\u0115\001\002" +
    "\000\014\014\uffda\023\uffda\031\uffda\037\uffda\045\uffda\001" +
    "\002\000\004\006\u0116\001\002\000\014\014\uffd5\023\uffd5" +
    "\031\uffd5\037\uffd5\045\uffd5\001\002\000\010\014\u0119\024" +
    "\265\033\262\001\002\000\004\006\u011b\001\002\000\004" +
    "\006\u011a\001\002\000\010\003\uffd6\014\uffd6\027\uffd6\001" +
    "\002\000\010\003\uffd7\014\uffd7\027\uffd7\001\002\000\004" +
    "\004\u011d\001\002\000\006\005\u011e\014\342\001\002\000" +
    "\004\034\u0133\001\002\000\004\005\u0120\001\002\000\004" +
    "\034\u0121\001\002\000\012\003\305\014\306\023\u0122\037" +
    "\014\001\002\000\016\014\323\027\050\032\043\040\035" +
    "\042\u012a\046\034\001\002\000\012\003\305\014\306\023" +
    "\u0124\037\014\001\002\000\016\014\323\027\050\032\043" +
    "\040\035\042\u012a\046\034\001\002\000\016\014\uff9a\027" +
    "\uff9a\032\uff9a\040\uff9a\042\uff9a\046\uff9a\001\002\000\016" +
    "\014\uff9e\027\uff9e\032\uff9e\040\uff9e\042\uff9e\046\uff9e\001" +
    "\002\000\026\003\uffa3\014\uffa3\023\uffa3\027\uffa3\031\uffa3" +
    "\032\uffa3\037\uffa3\040\uffa3\042\uffa3\046\uffa3\001\002\000" +
    "\016\014\uff99\027\uff99\032\uff99\040\uff99\042\uff99\046\uff99" +
    "\001\002\000\016\014\uff9b\027\uff9b\032\uff9b\040\uff9b\042" +
    "\uff9b\046\uff9b\001\002\000\004\003\u012f\001\002\000\016" +
    "\014\323\027\050\032\043\040\035\042\u012a\046\034\001" +
    "\002\000\016\014\uff9c\027\uff9c\032\uff9c\040\uff9c\042\uff9c" +
    "\046\uff9c\001\002\000\016\014\uff9d\027\uff9d\032\uff9d\040" +
    "\uff9d\042\uff9d\046\uff9d\001\002\000\026\003\uffa4\014\uffa4" +
    "\023\uffa4\027\uffa4\031\uffa4\032\uffa4\037\uffa4\040\uffa4\042" +
    "\uffa4\046\uffa4\001\002\000\016\014\uff98\027\uff98\032\uff98" +
    "\040\uff98\042\uff98\046\uff98\001\002\000\026\003\uffa5\014" +
    "\uffa5\023\uffa5\027\uffa5\031\uffa5\032\uffa5\037\uffa5\040\uffa5" +
    "\042\uffa5\046\uffa5\001\002\000\016\014\323\027\050\032" +
    "\043\040\035\042\u012a\046\034\001\002\000\026\003\uffa6" +
    "\014\uffa6\023\uffa6\027\uffa6\031\uffa6\032\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\046\uffa6\001\002\000\012\003\305\014\306" +
    "\023\u0134\037\014\001\002\000\022\003\305\014\u0139\027" +
    "\050\032\043\037\014\040\035\042\u012a\046\034\001\002" +
    "\000\012\003\305\014\306\023\u0136\037\014\001\002\000" +
    "\004\027\050\001\002\000\026\003\uffa0\014\uffa0\023\uffa0" +
    "\027\uffa0\031\uffa0\032\uffa0\037\uffa0\040\uffa0\042\uffa0\046" +
    "\uffa0\001\002\000\026\003\uffa2\014\uffa2\023\uffa2\027\uffa2" +
    "\031\uffa2\032\uffa2\037\uffa2\040\uffa2\042\uffa2\046\uffa2\001" +
    "\002\000\012\004\122\007\334\010\105\017\064\001\002" +
    "\000\016\014\323\027\050\032\043\040\035\042\u012a\046" +
    "\034\001\002\000\020\003\305\014\u0139\032\043\037\014" +
    "\040\035\042\u012a\046\034\001\002\000\016\014\323\027" +
    "\050\032\043\040\035\042\u012a\046\034\001\002\000\026" +
    "\003\uff9f\014\uff9f\023\uff9f\027\uff9f\031\uff9f\032\uff9f\037" +
    "\uff9f\040\uff9f\042\uff9f\046\uff9f\001\002\000\026\003\uffa1" +
    "\014\uffa1\023\uffa1\027\uffa1\031\uffa1\032\uffa1\037\uffa1\040" +
    "\uffa1\042\uffa1\046\uffa1\001\002\000\014\014\uffdb\023\uffdb" +
    "\031\uffdb\037\uffdb\045\uffdb\001\002\000\010\023\uffea\031" +
    "\025\037\014\001\002\000\012\014\254\023\uffeb\031\025" +
    "\037\014\001\002\000\010\023\uffe8\031\025\037\014\001" +
    "\002\000\014\014\254\023\uffee\031\025\037\014\045\016" +
    "\001\002\000\014\014\uffe2\023\uffe2\031\uffe2\037\uffe2\045" +
    "\uffe2\001\002\000\010\023\uffec\031\025\037\014\001\002" +
    "\000\012\014\254\023\uffed\031\025\037\014\001\002\000" +
    "\010\023\uffe5\031\025\037\014\001\002\000\010\023\uffe6" +
    "\031\025\037\014\001\002\000\012\014\254\023\uffe7\031" +
    "\025\037\014\001\002\000\010\023\uffe4\031\025\037\014" +
    "\001\002\000\004\004\ufff8\001\002\000\006\003\u014e\004" +
    "\u014d\001\002\000\006\003\u0152\005\u0153\001\002\000\004" +
    "\005\ufff6\001\002\000\004\005\u0150\001\002\000\004\034" +
    "\u0151\001\002\000\014\014\ufff5\023\ufff5\031\ufff5\037\ufff5" +
    "\045\ufff5\001\002\000\004\034\ufff4\001\002\000\004\034" +
    "\u0154\001\002\000\014\014\ufff9\023\ufff9\031\ufff9\037\ufff9" +
    "\045\ufff9\001\002\000\004\034\u0156\001\002\000\014\014" +
    "\ufff3\023\ufff3\031\ufff3\037\ufff3\045\ufff3\001\002\000\004" +
    "\004\u0158\001\002\000\004\005\u0159\001\002\000\004\034" +
    "\u015a\001\002\000\014\014\ufff7\023\ufff7\031\ufff7\037\ufff7" +
    "\045\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0159\000\006\002\003\073\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\030\006\010\007\014\010" +
    "\011\013\017\015\027\016\026\017\023\020\016\021\022" +
    "\030\012\070\020\001\001\000\026\007\u0143\010\u0142\013" +
    "\017\015\027\016\u0145\017\023\020\016\021\u0144\030\012" +
    "\070\020\001\001\000\022\013\u013e\015\027\016\u0140\017" +
    "\023\020\016\021\u013f\030\012\070\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\016\030\012\070\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\022\271" +
    "\023\045\024\270\037\050\052\032\053\037\054\035\056" +
    "\043\057\041\001\001\000\016\015\255\017\023\020\016" +
    "\021\254\030\012\070\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\022\040\023\045\024\036\037\050" +
    "\052\032\053\037\054\035\056\043\057\041\001\001\000" +
    "\002\001\001\000\012\057\053\060\152\063\156\065\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\023\231\024\227\037\050" +
    "\052\032\053\037\054\035\056\043\057\041\001\001\000" +
    "\002\001\001\000\012\057\053\060\152\063\156\065\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\055\057\053\060\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\074\042\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\057\053\060\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\053\060\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\116\040\113\057\111\060\112\063\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\041\137\042\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\040\126\057\124\060\112\063\130\071\122\072\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\040\126\057" +
    "\124\060\112\063\130\071\133\072\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\141\061\145\063\140\001\001\000\010\057\141\061\142" +
    "\063\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\057" +
    "\053\060\152\063\156\065\212\001\001\000\002\001\001" +
    "\000\004\041\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\057\053" +
    "\060\152\063\156\065\207\001\001\000\024\037\172\052" +
    "\161\053\164\054\162\056\165\057\041\063\171\066\163" +
    "\067\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\037\172\052\161\053\164\054\162\056\165\057\041" +
    "\063\171\067\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\037\172\052\161" +
    "\053\164\054\162\056\165\057\041\063\171\066\203\067" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\037\172\052\161\053" +
    "\164\054\162\056\165\057\041\063\171\067\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\053\060\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\026" +
    "\221\040\217\057\216\060\112\063\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\026\242\040\237\051\233\057\235\060\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\037\172\052\161\053\164\054" +
    "\162\056\165\057\041\063\171\066\247\067\166\001\001" +
    "\000\022\037\172\052\161\053\164\054\162\056\165\057" +
    "\041\063\171\067\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\020" +
    "\016\030\012\070\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\267\017\023\001\001\000\004\027" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\023\231" +
    "\024\272\037\050\052\032\053\037\054\035\056\043\057" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\342\034\337\044\336\001\001\000\004\077\276\001" +
    "\001\000\002\001\001\000\004\027\300\001\001\000\002" +
    "\001\001\000\012\020\303\035\302\036\306\045\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\303\035" +
    "\310\036\306\001\001\000\002\001\001\000\030\020\321" +
    "\033\312\037\324\043\314\047\317\052\313\053\316\054" +
    "\315\056\320\057\041\063\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\020\321\032\326\033\330\037" +
    "\324\047\317\052\313\053\316\054\315\056\320\057\041" +
    "\063\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\345\001\001" +
    "\000\002\001\001\000\012\020\303\035\302\036\306\045" +
    "\350\001\001\000\030\020\321\033\312\037\324\043\354" +
    "\047\317\052\313\053\316\054\315\056\320\057\041\063" +
    "\323\001\001\000\010\020\303\035\310\036\306\001\001" +
    "\000\030\020\321\033\312\037\324\043\352\047\317\052" +
    "\313\053\316\054\315\056\320\057\041\063\323\001\001" +
    "\000\030\020\321\032\353\033\330\037\324\047\317\052" +
    "\313\053\316\054\315\056\320\057\041\063\323\001\001" +
    "\000\002\001\001\000\030\020\321\032\355\033\330\037" +
    "\324\047\317\052\313\053\316\054\315\056\320\057\041" +
    "\063\323\001\001\000\002\001\001\000\010\031\365\034" +
    "\337\044\336\001\001\000\004\027\361\001\001\000\004" +
    "\027\363\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\367\001\001\000\002\001\001\000\012\020\303\035" +
    "\302\036\306\045\372\001\001\000\030\020\321\033\312" +
    "\037\324\043\376\047\317\052\313\053\316\054\315\056" +
    "\320\057\041\063\323\001\001\000\010\020\303\035\310" +
    "\036\306\001\001\000\030\020\321\033\312\037\324\043" +
    "\374\047\317\052\313\053\316\054\315\056\320\057\041" +
    "\063\323\001\001\000\030\020\321\032\375\033\330\037" +
    "\324\047\317\052\313\053\316\054\315\056\320\057\041" +
    "\063\323\001\001\000\002\001\001\000\030\020\321\032" +
    "\377\033\330\037\324\047\317\052\313\053\316\054\315" +
    "\056\320\057\041\063\323\001\001\000\002\001\001\000" +
    "\006\034\337\044\u0101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\262\001\001\000\002\001\001\000" +
    "\006\025\u0106\026\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\u010e\012\u010f\001\001" +
    "\000\002\001\001\000\004\014\u0113\001\001\000\006\011" +
    "\u0110\012\u010f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\031\u011e\034\337\044\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\020\303\035\302\036\306\045\u0122\001\001\000\026" +
    "\024\u012f\037\u012b\046\u0125\047\u0128\052\u0124\053\u0127\054" +
    "\315\057\041\063\323\064\u0130\001\001\000\010\020\303" +
    "\035\310\036\306\001\001\000\026\024\u0126\037\u012b\046" +
    "\u0125\047\u0128\052\u0124\053\u0127\054\315\057\041\063\323" +
    "\064\u012a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\024\u012d\037\u012b\046\u012c\047\u0128\052" +
    "\u0124\053\u0127\054\315\057\041\063\323\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\024\u0131\037\u012b\046\u012c" +
    "\047\u0128\052\u0124\053\u0127\054\315\057\041\063\323\001" +
    "\001\000\002\001\001\000\012\020\303\035\302\036\306" +
    "\045\u0134\001\001\000\036\020\303\024\u0137\035\302\036" +
    "\306\037\u012b\045\u013a\046\u0125\047\u0128\052\u0124\053\u0127" +
    "\054\315\057\041\063\323\064\u0139\001\001\000\010\020" +
    "\303\035\310\036\306\001\001\000\004\024\u0136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\024\u013d\037\u012b\046\u012c\047\u0128\052\u0124\053\u0127" +
    "\054\315\057\041\063\323\001\001\000\032\020\303\035" +
    "\310\036\306\037\u012b\046\u0125\047\u0128\052\u0124\053\u0127" +
    "\054\315\057\041\063\323\064\u013b\001\001\000\024\024" +
    "\u013c\037\u012b\046\u012c\047\u0128\052\u0124\053\u0127\054\315" +
    "\057\041\063\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\016\030\012\070\256" +
    "\001\001\000\016\015\255\017\023\020\016\021\u0141\030" +
    "\012\070\020\001\001\000\010\020\016\030\012\070\256" +
    "\001\001\000\022\013\u013e\015\027\016\u0148\017\023\020" +
    "\016\021\u0147\030\012\070\020\001\001\000\002\001\001" +
    "\000\010\020\016\030\012\070\256\001\001\000\016\015" +
    "\255\017\023\020\016\021\u0146\030\012\070\020\001\001" +
    "\000\010\020\016\030\012\070\256\001\001\000\010\020" +
    "\016\030\012\070\256\001\001\000\016\015\255\017\023" +
    "\020\016\021\u0149\030\012\070\020\001\001\000\010\020" +
    "\016\030\012\070\256\001\001\000\004\074\u0156\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\u014e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\076\u0154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // primitive_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_types",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // primitive_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_types",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // assignment_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // assignment_types ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // return_types ::= RETURN boolean SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // return_types ::= RETURN NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // return_types ::= RETURN expression_types arithmetic_expression expression_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // return_types ::= RETURN expression_types logic_expression expression_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // return_types ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // function_end ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_end",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // local_var ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: Error en la declaracion de la variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // local_var ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression_plus_function ::= single_function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_plus_function ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_plus_function ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expression_plus_function ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expression_types ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_types ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // arithmetic_expression ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // arithmetic_expression ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // logic_expression ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // logic_expression ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression ::= expression_types arithmetic_expression expression_plus_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression ::= expression_types logic_expression expression_plus_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // boolean_expression ::= boolean_expression AND boolean_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // boolean_expression ::= OPENPARENTHESIS boolean_expression CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // boolean_expression ::= expression_types logic_expression expression_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // boolean_expression ::= single_function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // boolean_expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // boolean_expression ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // boolean_expression ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // loop_sentences ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: Sentencia no reconocida en el bloque loop"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // loop_sentences ::= IDENTIFIER COLON CONSTANT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // loop_sentences ::= return_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // loop_sentences ::= single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // loop_sentences ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // loop_sentences ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // loop_sentences ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // loop_sentences ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // loop_sentences_list ::= loop_sentences_list loop_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // loop_sentences_list ::= loop_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences_list",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // while ::= WHILE boolean_expression LOOP loop_sentences_list END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // if ::= IF boolean_expression THEN loop_sentences_list ELSE loop_sentences_list END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // if ::= IF boolean_expression THEN loop_sentences_list END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // record_access_list ::= IDENTIFIER DOT record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_access_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // record_access_list ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_access_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // assignment_sentence ::= record_access_list ASSIGNMENT record_access_list SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // assignment_sentence ::= record_access_list ASSIGNMENT NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // assignment_sentence ::= record_access_list ASSIGNMENT single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assignment_sentence ::= record_access_list ASSIGNMENT boolean SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // assignment_sentence ::= record_access_list ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assignment_sentence ::= IDENTIFIER ASSIGNMENT record_access_list SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignment_sentence ::= IDENTIFIER ASSIGNMENT NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // assignment_sentence ::= IDENTIFIER ASSIGNMENT single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // assignment_sentence ::= IDENTIFIER ASSIGNMENT boolean SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assignment_sentence ::= IDENTIFIER ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // sentences ::= IDENTIFIER COLON CONSTANT error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: No se permite la declaracion de constantes en este bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sentences ::= return_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sentences ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sentences ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // sentences ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // sentences ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // sentences_list ::= sentences_list sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // sentences_list ::= sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // local_declarations ::= local_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // local_declarations ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // local_declarations_list ::= local_declarations_list local_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // local_declarations_list ::= local_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // parameter_putline_call ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: Error en la llamada de putline"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // parameter_putline_call ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // parameter_putline_call ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_putline_call ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter_putline_call ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameter_putline_call ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter_putline_call ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ES_sentences ::= PUTLINE OPENPARENTHESIS parameter_putline_call CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_sentences",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // procedure_body ::= RETURN error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxFatalError ("Error: En un subprograma procedimiento no hay sentencia return"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // procedure_body ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // procedure_body ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // procedure_body ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // procedure_body ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // procedure_body_list ::= procedure_body_list procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // procedure_body_list ::= procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS BEGIN local_declarations_list procedure_body_list end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS local_declarations_list BEGIN end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS BEGIN procedure_body_list end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS BEGIN end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS IS local_declarations_list BEGIN end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS IS local_declarations_list BEGIN procedure_body_list end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS IS BEGIN end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS IS BEGIN procedure_body_list end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameter_list ::= single_function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameter_list ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter_list ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameter_list ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameter_list ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parameter_list ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parameter_function_call_list ::= parameter_list COMMA parameter_function_call_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameter_function_call_list ::= parameter_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameter_function_call_list ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // single_function_call ::= IDENTIFIER OPENPARENTHESIS parameter_function_call_list CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_function_call",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // function_call ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_call ::= single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_body ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_body ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_body ::= return_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_body ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_body ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_body ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_body_list ::= function_body_list function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_body_list ::= function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameter_declaration ::= IDENTIFIER COLON OUT primitive_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parameter_declaration ::= IDENTIFIER COLON OUT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameter_declaration ::= IDENTIFIER COLON primitive_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameter_declaration ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter_declarations ::= parameter_declaration COMMA parameter_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter_declarations ::= parameter_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_parameters ::= IDENTIFIER COMMA function_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // function_parameters ::= parameter_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_declaration ::= FUNCTION IDENTIFIER error NT$4 RETURN primitive_types IS local_declarations_list BEGIN function_body_list function_end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$4 ::= 
            {
              Object RESULT =null;
 syntaxErrorManager.syntaxFatalError ("Error: Faltan los dos parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS RETURN primitive_types IS local_declarations_list BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS RETURN primitive_types IS BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS RETURN primitive_types IS local_declarations_list BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS RETURN primitive_types IS BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // subprogram_declaration ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // subprogram_declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprogram_declaration",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // subprograms_declaration_list ::= subprograms_declaration_list subprogram_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograms_declaration_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // subprograms_declaration_list ::= subprogram_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograms_declaration_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_declaration ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_declaration ::= IDENTIFIER COLON IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_declaration_list ::= IDENTIFIER COMMA var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_declaration_list ::= var_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_declarations ::= var_declarations var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declarations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_declarations ::= var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declarations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // end ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // record_end ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: Final de registro erroneo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // record_end ::= END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // record_field ::= IDENTIFIER COLON IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // record_field ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // record_list ::= record_field 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // record_list ::= record_field record_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record_declaration ::= TYPE IDENTIFIER IS RECORD record_list record_end 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // record_declarations ::= record_declarations record_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declarations",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // record_declarations ::= record_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declarations",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_types ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_types",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_types",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_declaration ::= IDENTIFIER COLON CONSTANT ASSIGNMENT const_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_declarations_list ::= const_declarations_list const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declarations_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_declarations_list ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declarations_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarations ::= const_declarations_list record_declarations var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarations ::= const_declarations_list var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarations ::= const_declarations_list record_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations ::= const_declarations_list record_declarations var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations ::= record_declarations var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations ::= var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations ::= record_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations ::= record_declarations var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= const_declarations_list subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations ::= const_declarations_list var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations ::= const_declarations_list record_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations ::= subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations ::= var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarations ::= record_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarations ::= const_declarations_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // main_procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS error NT$3 IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("ERROR: Falta el parentesis de cierre"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // main_procedure_declaration ::= PROCEDURE IDENTIFIER error NT$2 CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("ERROR: Falta el parentesis de apertura"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // main_procedure_declaration ::= PROCEDURE error NT$1 OPENPARENTHESIS CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxFatalError("ERROR: Falta el identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // main_procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom ::= main_procedure_declaration declarations BEGIN sentences_list error 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: Error en el end final"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= main_procedure_declaration declarations BEGIN sentences_list end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= main_procedure_declaration declarations BEGIN end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= main_procedure_declaration BEGIN sentences_list end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= main_procedure_declaration BEGIN end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

