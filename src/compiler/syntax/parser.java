
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 11 16:03:58 CET 2024
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import es.uned.lsi.compiler.lexical.*;
import es.uned.lsi.compiler.code.*;
import es.uned.lsi.compiler.intermediate.*;
import es.uned.lsi.compiler.semantic.*;
import es.uned.lsi.compiler.semantic.symbol.*;
import es.uned.lsi.compiler.semantic.type.*;
import es.uned.lsi.compiler.syntax.*;
import compiler.CompilerContext;
import compiler.lexical.*;
import compiler.syntax.nonTerminal.*;
import compiler.semantic.symbol.*;
import compiler.semantic.type.*;
import compiler.intermediate.*;
import compiler.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 11 16:03:58 CET 2024
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\244\000\002\002\004\000\002\072\002\000\002\002" +
    "\004\000\002\003\005\000\002\003\006\000\002\003\006" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\073\002\000\002\004\010\000\002\074\002\000\002" +
    "\004\010\000\002\075\002\000\002\004\010\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\006\000\002\006\003\000\002\006\004" +
    "\000\002\007\010\000\002\024\003\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\010\003\000\002" +
    "\010\004\000\002\013\010\000\002\011\004\000\002\011" +
    "\003\000\002\012\006\000\002\012\006\000\002\014\005" +
    "\000\002\014\003\000\002\023\005\000\002\016\003\000" +
    "\002\016\004\000\002\015\003\000\002\015\005\000\002" +
    "\017\006\000\002\017\006\000\002\020\003\000\002\020" +
    "\004\000\002\027\014\000\002\027\015\000\002\027\015" +
    "\000\002\027\016\000\002\076\002\000\002\027\015\000" +
    "\002\030\003\000\002\030\005\000\002\044\003\000\002" +
    "\044\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\006\000\002\033\006\000\002\043\003\000\002\043\004" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\063\006\000\002" +
    "\047\004\000\002\047\003\000\002\050\003\000\002\050" +
    "\005\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\004\013\000\002\064\003\000\002\064\004\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\054\007\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\045\003\000\002\045\004\000" +
    "\002\034\003\000\002\034\003\000\002\021\003\000\002" +
    "\021\004\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\006" +
    "\000\002\036\006\000\002\036\006\000\002\036\006\000" +
    "\002\036\006\000\002\036\006\000\002\036\006\000\002" +
    "\036\006\000\002\036\006\000\002\036\006\000\002\036" +
    "\006\000\002\057\005\000\002\057\005\000\002\052\011" +
    "\000\002\052\013\000\002\053\011\000\002\067\003\000" +
    "\002\067\004\000\002\070\003\000\002\070\003\000\002" +
    "\065\003\000\002\065\005\000\002\065\005\000\002\065" +
    "\003\000\002\065\005\000\002\065\005\000\002\065\007" +
    "\000\002\066\007\000\002\066\005\000\002\071\003\000" +
    "\002\071\005\000\002\040\005\000\002\040\005\000\002" +
    "\041\003\000\002\041\003\000\002\042\003\000\002\042" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\035\006\000\002\035\003\000\002" +
    "\031\005\000\002\056\005\000\002\056\007\000\002\056" +
    "\007\000\002\056\005\000\002\055\003\000\002\055\003" +
    "\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\004\037\000\001\002\000\004\002\u0141\001" +
    "\002\000\004\037\007\001\002\000\004\002\uffff\001\002" +
    "\000\006\003\u0125\014\u0126\001\002\000\012\014\017\023" +
    "\023\031\022\045\015\001\002\000\012\014\017\023\ufff2" +
    "\031\022\045\015\001\002\000\012\014\252\023\ufff1\031" +
    "\022\045\015\001\002\000\006\023\uffcc\031\uffcc\001\002" +
    "\000\012\014\uffe3\023\uffe3\031\uffe3\045\uffe3\001\002\000" +
    "\004\014\u0108\001\002\000\012\014\uffdc\023\uffdc\031\uffdc" +
    "\045\uffdc\001\002\000\006\007\u0101\011\256\001\002\000" +
    "\006\023\uffef\031\022\001\002\000\010\014\uffd0\023\uffd0" +
    "\031\uffd0\001\002\000\004\014\272\001\002\000\016\014" +
    "\042\027\045\032\040\040\032\042\043\046\031\001\002" +
    "\000\010\014\252\023\ufff0\031\022\001\002\000\010\014" +
    "\uffd2\023\uffd2\031\uffd2\001\002\000\004\023\027\001\002" +
    "\000\016\014\042\027\045\032\040\040\032\042\043\046" +
    "\031\001\002\000\020\003\uff97\014\uff97\027\uff97\032\uff97" +
    "\040\uff97\042\uff97\046\uff97\001\002\000\014\004\141\014" +
    "\144\016\071\030\106\044\103\001\002\000\004\004\231" +
    "\001\002\000\020\003\uff99\014\uff99\027\uff99\032\uff99\040" +
    "\uff99\042\uff99\046\uff99\001\002\000\004\002\ufffc\001\002" +
    "\000\020\003\227\014\042\027\045\032\040\040\032\042" +
    "\043\046\031\001\002\000\020\003\uff96\014\uff96\027\uff96" +
    "\032\uff96\040\uff96\042\uff96\046\uff96\001\002\000\004\010" +
    "\213\001\002\000\014\004\141\014\144\016\071\030\106" +
    "\044\103\001\002\000\020\003\uff95\014\uff95\027\uff95\032" +
    "\uff95\040\uff95\042\uff95\046\uff95\001\002\000\010\007\077" +
    "\010\076\017\056\001\002\000\006\014\054\016\053\001" +
    "\002\000\020\003\uff9b\014\uff9b\027\uff9b\032\uff9b\040\uff9b" +
    "\042\uff9b\046\uff9b\001\002\000\004\014\047\001\002\000" +
    "\020\003\uff98\014\uff98\027\uff98\032\uff98\040\uff98\042\uff98" +
    "\046\uff98\001\002\000\004\006\050\001\002\000\030\002" +
    "\uffd3\003\uffd3\014\uffd3\023\uffd3\027\uffd3\031\uffd3\032\uffd3" +
    "\037\uffd3\040\uffd3\042\uffd3\045\uffd3\001\002\000\022\005" +
    "\uff6d\006\uff6d\012\uff6d\013\uff6d\020\uff6d\021\uff6d\035\uff6d" +
    "\043\uff6d\001\002\000\012\012\067\013\065\020\064\021" +
    "\062\001\002\000\014\006\061\012\uff6e\013\uff6e\020\uff6e" +
    "\021\uff6e\001\002\000\016\006\055\012\uff6f\013\uff6f\017" +
    "\056\020\uff6f\021\uff6f\001\002\000\022\003\uff65\014\uff65" +
    "\027\uff65\032\uff65\037\uff65\040\uff65\042\uff65\046\uff65\001" +
    "\002\000\004\014\060\001\002\000\024\005\uff88\006\uff88" +
    "\010\uff88\012\uff88\013\uff88\020\uff88\021\uff88\035\uff88\043" +
    "\uff88\001\002\000\026\005\uff89\006\uff89\010\uff89\012\uff89" +
    "\013\uff89\017\056\020\uff89\021\uff89\035\uff89\043\uff89\001" +
    "\002\000\022\003\uff62\014\uff62\027\uff62\032\uff62\037\uff62" +
    "\040\uff62\042\uff62\046\uff62\001\002\000\006\014\uff72\016" +
    "\uff72\001\002\000\006\014\072\016\071\001\002\000\006" +
    "\014\uff73\016\uff73\001\002\000\006\014\uff71\016\uff71\001" +
    "\002\000\006\014\072\016\071\001\002\000\006\014\uff70" +
    "\016\uff70\001\002\000\004\006\073\001\002\000\016\005" +
    "\uff6e\006\uff6e\020\uff6e\021\uff6e\035\uff6e\043\uff6e\001\002" +
    "\000\020\005\uff6f\006\uff6f\017\056\020\uff6f\021\uff6f\035" +
    "\uff6f\043\uff6f\001\002\000\022\003\uff64\014\uff64\027\uff64" +
    "\032\uff64\037\uff64\040\uff64\042\uff64\046\uff64\001\002\000" +
    "\004\006\075\001\002\000\022\003\uff63\014\uff63\027\uff63" +
    "\032\uff63\037\uff63\040\uff63\042\uff63\046\uff63\001\002\000" +
    "\012\014\110\016\102\030\106\044\103\001\002\000\004" +
    "\025\100\001\002\000\004\003\101\001\002\000\020\003" +
    "\uff94\014\uff94\027\uff94\032\uff94\040\uff94\042\uff94\046\uff94" +
    "\001\002\000\014\006\140\012\uff6e\013\uff6e\020\uff6e\021" +
    "\uff6e\001\002\000\014\005\uffde\006\uffde\022\uffde\035\uffde" +
    "\043\uffde\001\002\000\014\006\137\012\uff6d\013\uff6d\020" +
    "\uff6d\021\uff6d\001\002\000\012\012\067\013\065\020\064" +
    "\021\062\001\002\000\014\005\uffdd\006\uffdd\022\uffdd\035" +
    "\uffdd\043\uffdd\001\002\000\004\006\126\001\002\000\016" +
    "\004\115\012\uff6f\013\uff6f\017\056\020\uff6f\021\uff6f\001" +
    "\002\000\004\006\114\001\002\000\004\006\113\001\002" +
    "\000\024\003\uff92\014\uff92\026\uff92\027\uff92\032\uff92\037" +
    "\uff92\040\uff92\042\uff92\046\uff92\001\002\000\024\003\uff91" +
    "\014\uff91\026\uff91\027\uff91\032\uff91\037\uff91\040\uff91\042" +
    "\uff91\046\uff91\001\002\000\010\014\121\015\117\016\120" +
    "\001\002\000\004\005\125\001\002\000\006\005\uffaf\011" +
    "\uffaf\001\002\000\006\005\uffae\011\uffae\001\002\000\006" +
    "\005\uffb0\011\uffb0\001\002\000\006\005\uffb2\011\123\001" +
    "\002\000\010\014\121\015\117\016\120\001\002\000\004" +
    "\005\uffb1\001\002\000\006\005\uffb5\006\uffb5\001\002\000" +
    "\024\003\uff93\014\uff93\026\uff93\027\uff93\032\uff93\037\uff93" +
    "\040\uff93\042\uff93\046\uff93\001\002\000\006\014\135\016" +
    "\134\001\002\000\006\014\135\016\134\001\002\000\006" +
    "\005\uff69\006\uff69\001\002\000\006\005\uff6a\006\uff6a\001" +
    "\002\000\006\005\uff75\006\uff75\001\002\000\006\005\uff6b" +
    "\006\uff6b\001\002\000\012\004\115\005\uff6c\006\uff6c\017" +
    "\056\001\002\000\006\005\uff74\006\uff74\001\002\000\024" +
    "\003\uff8f\014\uff8f\026\uff8f\027\uff8f\032\uff8f\037\uff8f\040" +
    "\uff8f\042\uff8f\046\uff8f\001\002\000\024\003\uff90\014\uff90" +
    "\026\uff90\027\uff90\032\uff90\037\uff90\040\uff90\042\uff90\046" +
    "\uff90\001\002\000\012\014\207\016\071\030\106\044\103" +
    "\001\002\000\006\020\064\021\062\001\002\000\006\035" +
    "\uff7d\043\uff7d\001\002\000\016\017\056\020\uff6f\021\uff6f" +
    "\022\173\035\uff80\043\uff80\001\002\000\004\043\154\001" +
    "\002\000\004\022\147\001\002\000\006\030\106\044\103" +
    "\001\002\000\012\005\uff77\022\152\035\uff77\043\uff77\001" +
    "\002\000\006\035\uff7c\043\uff7c\001\002\000\006\030\106" +
    "\044\103\001\002\000\010\005\uff76\035\uff76\043\uff76\001" +
    "\002\000\006\014\157\040\032\001\002\000\012\014\uff82" +
    "\026\uff82\027\uff82\040\uff82\001\002\000\012\014\uff81\026" +
    "\uff81\027\uff81\040\uff81\001\002\000\006\010\076\017\056" +
    "\001\002\000\012\014\157\026\162\027\163\040\032\001" +
    "\002\000\012\014\uff84\026\uff84\027\uff84\040\uff84\001\002" +
    "\000\006\014\157\040\032\001\002\000\004\032\165\001" +
    "\002\000\012\014\uff83\026\uff83\027\uff83\040\uff83\001\002" +
    "\000\004\006\166\001\002\000\022\003\uff87\014\uff87\027" +
    "\uff87\032\uff87\037\uff87\040\uff87\042\uff87\046\uff87\001\002" +
    "\000\010\014\157\027\170\040\032\001\002\000\004\032" +
    "\171\001\002\000\004\006\172\001\002\000\022\003\uff86" +
    "\014\uff86\027\uff86\032\uff86\037\uff86\040\uff86\042\uff86\046" +
    "\uff86\001\002\000\010\004\174\030\106\044\103\001\002" +
    "\000\012\014\072\016\071\030\106\044\103\001\002\000" +
    "\006\035\uff7f\043\uff7f\001\002\000\006\035\uff7e\043\uff7e" +
    "\001\002\000\006\020\064\021\062\001\002\000\004\005" +
    "\201\001\002\000\010\005\uff78\035\uff78\043\uff78\001\002" +
    "\000\006\014\072\016\071\001\002\000\004\005\204\001" +
    "\002\000\010\005\uff79\035\uff79\043\uff79\001\002\000\006" +
    "\014\072\016\071\001\002\000\006\035\uff7b\043\uff7b\001" +
    "\002\000\012\017\056\020\uff6f\021\uff6f\022\210\001\002" +
    "\000\004\004\174\001\002\000\004\005\212\001\002\000" +
    "\006\035\uff7a\043\uff7a\001\002\000\012\014\110\016\214" +
    "\030\106\044\103\001\002\000\014\006\225\012\uff6e\013" +
    "\uff6e\020\uff6e\021\uff6e\001\002\000\014\006\224\012\uff6d" +
    "\013\uff6d\020\uff6d\021\uff6d\001\002\000\004\006\223\001" +
    "\002\000\004\006\222\001\002\000\004\006\221\001\002" +
    "\000\024\003\uff8d\014\uff8d\026\uff8d\027\uff8d\032\uff8d\037" +
    "\uff8d\040\uff8d\042\uff8d\046\uff8d\001\002\000\024\003\uff8c" +
    "\014\uff8c\026\uff8c\027\uff8c\032\uff8c\037\uff8c\040\uff8c\042" +
    "\uff8c\046\uff8c\001\002\000\024\003\uff8e\014\uff8e\026\uff8e" +
    "\027\uff8e\032\uff8e\037\uff8e\040\uff8e\042\uff8e\046\uff8e\001" +
    "\002\000\024\003\uff8a\014\uff8a\026\uff8a\027\uff8a\032\uff8a" +
    "\037\uff8a\040\uff8a\042\uff8a\046\uff8a\001\002\000\024\003" +
    "\uff8b\014\uff8b\026\uff8b\027\uff8b\032\uff8b\037\uff8b\040\uff8b" +
    "\042\uff8b\046\uff8b\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffa\001\002\000\020\003\uff9a\014\uff9a\027\uff9a" +
    "\032\uff9a\040\uff9a\042\uff9a\046\uff9a\001\002\000\016\003" +
    "\237\014\240\015\235\016\233\030\106\044\103\001\002" +
    "\000\004\005\242\001\002\000\014\005\uffa4\012\uff6e\013" +
    "\uff6e\020\uff6e\021\uff6e\001\002\000\014\005\uffa1\012\uff6d" +
    "\013\uff6d\020\uff6d\021\uff6d\001\002\000\004\005\uffa5\001" +
    "\002\000\004\005\uffa3\001\002\000\004\005\uffa0\001\002" +
    "\000\016\005\uffa6\012\uff6f\013\uff6f\017\056\020\uff6f\021" +
    "\uff6f\001\002\000\004\005\uffa2\001\002\000\004\006\243" +
    "\001\002\000\024\003\uffa7\014\uffa7\026\uffa7\027\uffa7\032" +
    "\uffa7\037\uffa7\040\uffa7\042\uffa7\046\uffa7\001\002\000\004" +
    "\035\245\001\002\000\006\014\157\040\032\001\002\000" +
    "\010\014\157\027\247\040\032\001\002\000\004\035\250" +
    "\001\002\000\004\006\251\001\002\000\020\003\uff85\014" +
    "\uff85\027\uff85\032\uff85\040\uff85\042\uff85\046\uff85\001\002" +
    "\000\006\007\257\011\256\001\002\000\010\014\uffd1\023" +
    "\uffd1\031\uffd1\001\002\000\006\023\uffe9\031\022\001\002" +
    "\000\006\023\uffcb\031\uffcb\001\002\000\004\014\252\001" +
    "\002\000\010\014\262\024\263\033\260\001\002\000\012" +
    "\005\uff5f\006\uff5f\011\uff5f\034\uff5f\001\002\000\004\006" +
    "\265\001\002\000\004\006\264\001\002\000\012\005\uff5e" +
    "\006\uff5e\011\uff5e\034\uff5e\001\002\000\010\014\uffce\023" +
    "\uffce\031\uffce\001\002\000\010\014\uffcd\023\uffcd\031\uffcd" +
    "\001\002\000\010\014\uffcf\023\uffcf\031\uffcf\001\002\000" +
    "\004\002\ufffe\001\002\000\016\014\042\027\045\032\040" +
    "\040\032\042\043\046\031\001\002\000\004\002\ufffd\001" +
    "\002\000\006\003\274\004\273\001\002\000\006\005\335" +
    "\014\337\001\002\000\004\042\uffc6\001\002\000\004\042" +
    "\276\001\002\000\006\024\263\033\260\001\002\000\004" +
    "\034\300\001\002\000\010\003\302\014\305\037\007\001" +
    "\002\000\012\003\uff9f\014\uff9f\023\uff9f\037\uff9f\001\002" +
    "\000\012\003\uff67\014\uff67\023\uff67\037\uff67\001\002\000" +
    "\012\003\uff9d\014\uff9d\023\uff9d\037\uff9d\001\002\000\012" +
    "\003\uff9c\014\uff9c\023\uff9c\037\uff9c\001\002\000\004\007" +
    "\331\001\002\000\012\003\302\014\305\023\310\037\007" +
    "\001\002\000\012\003\uff9e\014\uff9e\023\uff9e\037\uff9e\001" +
    "\002\000\014\014\320\032\040\037\007\040\032\042\043" +
    "\001\002\000\016\014\uffbc\027\uffbc\032\uffbc\037\uffbc\040" +
    "\uffbc\042\uffbc\001\002\000\016\014\uffb6\027\uffb6\032\uffb6" +
    "\037\uffb6\040\uffb6\042\uffb6\001\002\000\016\014\320\027" +
    "\326\032\040\037\007\040\032\042\043\001\002\000\016" +
    "\014\uffb3\027\uffb3\032\uffb3\037\uffb3\040\uffb3\042\uffb3\001" +
    "\002\000\016\014\uffb8\027\uffb8\032\uffb8\037\uffb8\040\uffb8" +
    "\042\uffb8\001\002\000\016\014\uffb7\027\uffb7\032\uffb7\037" +
    "\uffb7\040\uffb7\042\uffb7\001\002\000\016\014\uffb9\027\uffb9" +
    "\032\uffb9\037\uffb9\040\uffb9\042\uffb9\001\002\000\010\004" +
    "\115\010\076\017\056\001\002\000\004\006\323\001\002" +
    "\000\016\014\uffba\027\uffba\032\uffba\037\uffba\040\uffba\042" +
    "\uffba\001\002\000\016\014\uffb4\027\uffb4\032\uffb4\037\uffb4" +
    "\040\uffb4\042\uffb4\001\002\000\016\014\uffbb\027\uffbb\032" +
    "\uffbb\037\uffbb\040\uffbb\042\uffbb\001\002\000\006\023\uffc5" +
    "\031\uffc5\001\002\000\004\014\327\001\002\000\004\006" +
    "\330\001\002\000\006\023\uff66\031\uff66\001\002\000\006" +
    "\024\263\033\260\001\002\000\004\006\333\001\002\000" +
    "\012\003\uff68\014\uff68\023\uff68\037\uff68\001\002\000\004" +
    "\005\uffc4\001\002\000\004\042\367\001\002\000\006\005" +
    "\uffc2\011\364\001\002\000\006\007\355\011\354\001\002" +
    "\000\004\005\341\001\002\000\004\042\342\001\002\000" +
    "\006\024\263\033\260\001\002\000\004\034\344\001\002" +
    "\000\012\003\302\014\305\023\345\037\007\001\002\000" +
    "\014\014\320\032\040\037\007\040\032\042\043\001\002" +
    "\000\012\003\302\014\305\023\347\037\007\001\002\000" +
    "\014\014\320\032\040\037\007\040\032\042\043\001\002" +
    "\000\016\014\320\027\326\032\040\037\007\040\032\042" +
    "\043\001\002\000\006\023\uffc7\031\uffc7\001\002\000\016" +
    "\014\320\027\326\032\040\037\007\040\032\042\043\001" +
    "\002\000\006\023\uffc8\031\uffc8\001\002\000\004\014\337" +
    "\001\002\000\012\014\360\024\263\033\260\036\356\001" +
    "\002\000\010\014\362\024\263\033\260\001\002\000\006" +
    "\005\uffbf\011\uffbf\001\002\000\006\005\uffc0\011\uffc0\001" +
    "\002\000\006\005\uffbd\011\uffbd\001\002\000\006\005\uffbe" +
    "\011\uffbe\001\002\000\004\005\uffc3\001\002\000\004\014" +
    "\366\001\002\000\004\005\uffc1\001\002\000\004\007\355" +
    "\001\002\000\006\024\263\033\260\001\002\000\004\034" +
    "\371\001\002\000\010\003\302\014\305\023\372\001\002" +
    "\000\014\014\320\032\040\037\007\040\032\042\043\001" +
    "\002\000\004\023\374\001\002\000\014\014\320\032\040" +
    "\037\007\040\032\042\043\001\002\000\016\014\320\027" +
    "\326\032\040\037\007\040\032\042\043\001\002\000\006" +
    "\023\uffc9\031\uffc9\001\002\000\016\014\320\027\326\032" +
    "\040\037\007\040\032\042\043\001\002\000\006\023\uffca" +
    "\031\uffca\001\002\000\012\014\262\024\263\025\u0102\033" +
    "\260\001\002\000\004\010\u0103\001\002\000\010\016\u0106" +
    "\030\106\044\103\001\002\000\004\006\u0107\001\002\000" +
    "\004\006\uffdf\001\002\000\004\006\uffe0\001\002\000\012" +
    "\014\uffe1\023\uffe1\031\uffe1\045\uffe1\001\002\000\004\034" +
    "\u0109\001\002\000\004\041\u010a\001\002\000\004\014\u010b" +
    "\001\002\000\004\007\u0114\001\002\000\006\003\u010f\027" +
    "\u0110\001\002\000\010\003\uffd8\014\u010b\027\uffd8\001\002" +
    "\000\006\003\uffd9\027\uffd9\001\002\000\012\014\uffd4\023" +
    "\uffd4\031\uffd4\045\uffd4\001\002\000\004\041\u0112\001\002" +
    "\000\012\014\uffda\023\uffda\031\uffda\045\uffda\001\002\000" +
    "\004\006\u0113\001\002\000\012\014\uffd5\023\uffd5\031\uffd5" +
    "\045\uffd5\001\002\000\010\014\u0116\024\263\033\260\001" +
    "\002\000\004\006\u0118\001\002\000\004\006\u0117\001\002" +
    "\000\010\003\uffd6\014\uffd6\027\uffd6\001\002\000\010\003" +
    "\uffd7\014\uffd7\027\uffd7\001\002\000\012\014\uffdb\023\uffdb" +
    "\031\uffdb\045\uffdb\001\002\000\006\023\uffea\031\022\001" +
    "\002\000\010\014\252\023\uffeb\031\022\001\002\000\006" +
    "\023\uffe8\031\022\001\002\000\012\014\252\023\uffee\031" +
    "\022\045\015\001\002\000\012\014\uffe2\023\uffe2\031\uffe2" +
    "\045\uffe2\001\002\000\006\023\uffec\031\022\001\002\000" +
    "\010\014\252\023\uffed\031\022\001\002\000\006\023\uffe5" +
    "\031\022\001\002\000\006\023\uffe6\031\022\001\002\000" +
    "\010\014\252\023\uffe7\031\022\001\002\000\006\023\uffe4" +
    "\031\022\001\002\000\004\004\ufff8\001\002\000\006\003" +
    "\u0128\004\u0127\001\002\000\010\003\u012c\005\u012d\014\366" +
    "\001\002\000\004\005\ufff6\001\002\000\004\005\u012a\001" +
    "\002\000\004\034\u012b\001\002\000\026\003\ufff5\014\ufff5" +
    "\023\ufff5\027\ufff5\031\ufff5\032\ufff5\037\ufff5\040\ufff5\042" +
    "\ufff5\045\ufff5\001\002\000\004\034\ufff4\001\002\000\004" +
    "\034\u013a\001\002\000\004\005\u012f\001\002\000\004\034" +
    "\u0130\001\002\000\004\023\u0131\001\002\000\010\014\u0136" +
    "\032\040\040\032\001\002\000\012\014\uffa8\027\uffa8\032" +
    "\uffa8\040\uffa8\001\002\000\012\014\uffac\027\uffac\032\uffac" +
    "\040\uffac\001\002\000\012\014\uffaa\027\uffaa\032\uffaa\040" +
    "\uffaa\001\002\000\012\014\uffa9\027\uffa9\032\uffa9\040\uffa9" +
    "\001\002\000\004\004\115\001\002\000\012\014\u0136\027" +
    "\045\032\040\040\032\001\002\000\012\014\uffab\027\uffab" +
    "\032\uffab\040\uffab\001\002\000\026\003\uffad\014\uffad\023" +
    "\uffad\027\uffad\031\uffad\032\uffad\037\uffad\040\uffad\042\uffad" +
    "\045\uffad\001\002\000\026\003\ufff9\014\ufff9\023\ufff9\027" +
    "\ufff9\031\ufff9\032\ufff9\037\ufff9\040\ufff9\042\ufff9\045\ufff9" +
    "\001\002\000\004\034\u013c\001\002\000\026\003\ufff3\014" +
    "\ufff3\023\ufff3\027\ufff3\031\ufff3\032\ufff3\037\ufff3\040\ufff3" +
    "\042\ufff3\045\ufff3\001\002\000\004\004\u013e\001\002\000" +
    "\004\005\u013f\001\002\000\004\034\u0140\001\002\000\026" +
    "\003\ufff7\014\ufff7\023\ufff7\027\ufff7\031\ufff7\032\ufff7\037" +
    "\ufff7\040\ufff7\042\ufff7\045\ufff7\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013f\000\006\002\003\072\004\001\001\000\002\001" +
    "\001\000\006\003\005\004\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\025\006\010\007\013\010" +
    "\011\013\015\015\024\016\023\017\020\020\017\027\012" +
    "\001\001\000\022\007\u011d\010\u011c\013\015\015\024\016" +
    "\u011f\017\020\020\u011e\027\012\001\001\000\016\013\u0118" +
    "\015\024\016\u011a\017\020\020\u0119\027\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\021\267\022\043" +
    "\023\266\036\045\052\027\053\035\054\032\056\040\057" +
    "\036\001\001\000\012\015\252\017\020\020\253\027\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\021" +
    "\034\022\043\023\033\036\045\052\027\053\035\054\032" +
    "\056\040\057\036\001\001\000\002\001\001\000\014\025" +
    "\145\057\050\060\141\065\243\066\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\227\023\225\036\045\052\027\053\035\054\032\056\040" +
    "\057\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\025\145\057\050\060\141\065\144\066\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\050\060" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\065\042\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\057\050\060\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\050\060\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\025\111\040\106\057\103\060" +
    "\104\063\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\127\042\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\050\115\062\121\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\050\123\062\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\057\131" +
    "\061\135\063\130\001\001\000\010\057\131\061\132\063" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\025\147" +
    "\057\050\060\176\071\177\001\001\000\004\041\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\147\071\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\147\071\152" +
    "\001\001\000\002\001\001\000\014\036\155\054\154\057" +
    "\036\067\157\070\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\036\155\054\154\057" +
    "\036\070\163\001\001\000\002\001\001\000\014\036\155" +
    "\054\154\057\036\067\166\070\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\036\155\054\154\057\036\070\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\147\066\174\071\175\001\001\000\012\025\147\057" +
    "\050\060\176\071\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\041\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\057\050\060\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\057\050\060\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\217\040\215\057\214\060\104\063\216\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\240\040\235\051\231\057\233\060\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\036\155\054\154\057\036\067" +
    "\245\070\160\001\001\000\012\036\155\054\154\057\036" +
    "\070\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\254\001\001\000\002\001\001\000\006\015\265\017" +
    "\020\001\001\000\004\026\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\022\227\023\270\036\045\052\027\053" +
    "\035\054\032\056\040\057\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\337\033\335\044\333\001" +
    "\001\000\004\076\274\001\001\000\002\001\001\000\004" +
    "\026\276\001\001\000\002\001\001\000\012\004\302\034" +
    "\300\035\303\045\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\302\034\306\035\303\001\001\000\002" +
    "\001\001\000\026\004\316\032\310\036\321\043\312\047" +
    "\314\052\311\054\313\056\315\057\036\063\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\316\031" +
    "\324\032\323\036\321\047\314\052\311\054\313\056\315" +
    "\057\036\063\320\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\342\001\001\000\002" +
    "\001\001\000\012\004\302\034\300\035\303\045\345\001" +
    "\001\000\026\004\316\032\310\036\321\043\351\047\314" +
    "\052\311\054\313\056\315\057\036\063\320\001\001\000" +
    "\010\004\302\034\306\035\303\001\001\000\026\004\316" +
    "\032\310\036\321\043\347\047\314\052\311\054\313\056" +
    "\315\057\036\063\320\001\001\000\026\004\316\031\350" +
    "\032\323\036\321\047\314\052\311\054\313\056\315\057" +
    "\036\063\320\001\001\000\002\001\001\000\026\004\316" +
    "\031\352\032\323\036\321\047\314\052\311\054\313\056" +
    "\315\057\036\063\320\001\001\000\002\001\001\000\010" +
    "\030\362\033\335\044\333\001\001\000\004\026\356\001" +
    "\001\000\004\026\360\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\033\335\044\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\367\001\001\000\002\001" +
    "\001\000\004\035\372\001\001\000\026\004\316\032\310" +
    "\036\321\043\376\047\314\052\311\054\313\056\315\057" +
    "\036\063\320\001\001\000\002\001\001\000\026\004\316" +
    "\032\310\036\321\043\374\047\314\052\311\054\313\056" +
    "\315\057\036\063\320\001\001\000\026\004\316\031\375" +
    "\032\323\036\321\047\314\052\311\054\313\056\315\057" +
    "\036\063\320\001\001\000\002\001\001\000\026\004\316" +
    "\031\377\032\323\036\321\047\314\052\311\054\313\056" +
    "\315\057\036\063\320\001\001\000\002\001\001\000\004" +
    "\026\260\001\001\000\002\001\001\000\006\024\u0103\025" +
    "\u0104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\u010b\012\u010c\001\001\000\002\001\001" +
    "\000\004\014\u0110\001\001\000\006\011\u010d\012\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\254\001\001\000\012\015\252\017\020\020\u011b" +
    "\027\012\001\001\000\004\027\254\001\001\000\016\013" +
    "\u0118\015\024\016\u0122\017\020\020\u0121\027\012\001\001" +
    "\000\002\001\001\000\004\027\254\001\001\000\012\015" +
    "\252\017\020\020\u0120\027\012\001\001\000\004\027\254" +
    "\001\001\000\004\027\254\001\001\000\012\015\252\017" +
    "\020\020\u0123\027\012\001\001\000\004\027\254\001\001" +
    "\000\004\073\u013c\001\001\000\002\001\001\000\004\033" +
    "\u012d\001\001\000\004\074\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\075\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\037\u0133\046\u0132\047\u0134\052" +
    "\u0131\054\313\063\320\064\u0136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\023\u0138\037\u0133\046\u0137\047\u0134" +
    "\052\u0131\054\313\063\320\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	SyntaxErrorManager syntaxErrorManager = CompilerContext.getSyntaxErrorManager();
	
	public void syntax_error(Symbol symbol)
	{ 
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxError ("Error sintactico", token);	    
	}
		
	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{	
	    Token token = (Token) symbol.value;
	    syntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	
	SyntaxErrorManager   syntaxErrorManager   = CompilerContext.getSyntaxErrorManager();
	SemanticErrorManager semanticErrorManager = CompilerContext.getSemanticErrorManager ();
	ScopeManagerIF       scopeManager         = CompilerContext.getScopeManager ();
	FinalCodeFactoryIF   finalCodeFactory     = CompilerContext.getFinalCodeFactory ();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // primitive_types ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_types",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // primitive_types ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("primitive_types",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // assignment_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // assignment_types ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_types",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // return_types ::= RETURN NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // return_types ::= RETURN expression_types arithmetic_expression expression_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // return_types ::= RETURN expression_types logic_expression expression_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // return_types ::= RETURN IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("return_types",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // function_end ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_end",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // local_var ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo("ERROR: Error en la declaracion de la variable"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // local_var ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_var",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_plus_function ::= single_function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_plus_function ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_plus_function ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_plus_function ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_plus_function",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_types ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_types ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_types",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithmetic_expression ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithmetic_expression ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_expression",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // logic_expression ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // logic_expression ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logic_expression",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression ::= expression_types arithmetic_expression expression_plus_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression ::= expression_types logic_expression expression_plus_function 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // loop_boolean_list ::= boolean AND loop_boolean_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_boolean_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // loop_boolean_list ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_boolean_list",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // boolean_parenthesis ::= OPENPARENTHESIS loop_boolean_list CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_parenthesis",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // boolean_parenthesis ::= OPENPARENTHESIS expression_types logic_expression expression_types CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_parenthesis",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // boolean_expression ::= OPENPARENTHESIS IDENTIFIER AND boolean_parenthesis CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // boolean_expression ::= expression_types logic_expression expression_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // boolean_expression ::= boolean AND loop_boolean_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // boolean_expression ::= boolean_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // boolean_expression ::= IDENTIFIER AND loop_boolean_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // boolean_expression ::= IDENTIFIER AND boolean_parenthesis 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // boolean_expression ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // loop_sentences ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // loop_sentences ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // loop_sentences_list ::= loop_sentences_list loop_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // loop_sentences_list ::= loop_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("loop_sentences_list",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // while ::= WHILE boolean_expression LOOP loop_sentences_list END LOOP SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // if ::= IF boolean_expression THEN loop_sentences_list ELSE loop_sentences_list END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // if ::= IF boolean_expression THEN loop_sentences_list END IF SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // record_access_list ::= IDENTIFIER DOT record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_access_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // record_access_list ::= IDENTIFIER DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_access_list",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment_sentence ::= record_access_list ASSIGNMENT record_access_list SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // assignment_sentence ::= record_access_list ASSIGNMENT NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // assignment_sentence ::= record_access_list ASSIGNMENT single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // assignment_sentence ::= record_access_list ASSIGNMENT boolean SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // assignment_sentence ::= record_access_list ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // assignment_sentence ::= IDENTIFIER ASSIGNMENT record_access_list SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // assignment_sentence ::= IDENTIFIER ASSIGNMENT NUMBER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // assignment_sentence ::= IDENTIFIER ASSIGNMENT single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // assignment_sentence ::= IDENTIFIER ASSIGNMENT boolean SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // assignment_sentence ::= IDENTIFIER ASSIGNMENT expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_sentence",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // sentences ::= IDENTIFIER COLON CONSTANT error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo("ERROR: No se permite la declaracion de constantes en este bloque"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // sentences ::= return_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // sentences ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // sentences ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // sentences ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sentences ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // sentences_list ::= sentences_list sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentences_list ::= sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // local_declarations ::= local_var 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // local_declarations ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // local_declarations_list ::= local_declarations_list local_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // local_declarations_list ::= local_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("local_declarations_list",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameter_putline_call ::= error 
            {
              Object RESULT =null;
		syntaxErrorManager.syntaxInfo("ERROR: Error en la llamada de putline"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parameter_putline_call ::= record_access_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parameter_putline_call ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parameter_putline_call ::= expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter_putline_call ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_putline_call ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_putline_call ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_putline_call",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ES_sentences ::= PUTLINE OPENPARENTHESIS parameter_putline_call CLOSEPARENTHESIS SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES_sentences",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // procedure_body ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // procedure_body ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // procedure_body ::= assignment_sentence_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // procedure_body_list ::= procedure_body_list procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // procedure_body_list ::= procedure_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_body_list",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS parameter_declaration CLOSEPARENTHESIS IS BEGIN procedure_body_list end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parameter_function_call_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_types",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameter_function_call_types ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_types",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameter_function_call_types ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call_types",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameter_function_call ::= parameter_function_call_types COMMA parameter_function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parameter_function_call ::= parameter_function_call_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_function_call",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // function_call ::= ES_sentences 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_call ::= single_function_call SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_call",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // single_function_call ::= IDENTIFIER OPENPARENTHESIS parameter_function_call CLOSEPARENTHESIS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("single_function_call",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // function_body ::= if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // function_body ::= return_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function_body ::= function_call 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // function_body ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // function_body ::= assignment_sentence 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function_body_list ::= function_body_list function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // function_body_list ::= function_body 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_body_list",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameter_declaration ::= IDENTIFIER COLON OUT primitive_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameter_declaration ::= IDENTIFIER COLON OUT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter_declaration ::= IDENTIFIER COLON primitive_types 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter_declaration ::= IDENTIFIER COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declaration",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameter_declarations ::= parameter_declaration COMMA parameter_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameter_declarations ::= parameter_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_declarations",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // function_parameters ::= IDENTIFIER COMMA function_parameters 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // function_parameters ::= parameter_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_parameters",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // function_declaration ::= FUNCTION IDENTIFIER error NT$4 RETURN primitive_types IS local_declarations_list BEGIN function_body_list function_end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              Object RESULT =null;
 syntaxErrorManager.syntaxFatalError ("Error: Faltan los dos parentesis"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS RETURN primitive_types IS local_declarations_list BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS function_parameters CLOSEPARENTHESIS RETURN primitive_types IS BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS RETURN primitive_types IS local_var BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_declaration ::= FUNCTION IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS RETURN primitive_types IS BEGIN function_body_list function_end 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // subprograms_declaration_list ::= subprograms_declaration_list function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograms_declaration_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // subprograms_declaration_list ::= function_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("subprograms_declaration_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // var_declaration ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // var_declaration ::= IDENTIFIER COLON IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // var_declaration_list ::= IDENTIFIER COMMA var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // var_declaration_list ::= var_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declaration_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // var_declarations ::= var_declarations var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declarations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // var_declarations ::= var_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_declarations",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // end ::= END IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("end",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // record_end ::= error 
            {
              Object RESULT =null;
		 syntaxErrorManager.syntaxDebug ("Error: Final de registro erroneo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // record_end ::= END RECORD SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_end",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // record_field ::= IDENTIFIER COLON IDENTIFIER SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // record_field ::= IDENTIFIER COLON primitive_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_field",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // record_list ::= record_field 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // record_list ::= record_field record_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // record_declaration ::= TYPE IDENTIFIER IS RECORD record_list record_end 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declaration",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // record_declarations ::= record_declarations record_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declarations",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // record_declarations ::= record_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("record_declarations",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolean",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // const_types ::= boolean 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_types",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // const_types ::= NUMBER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_types",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // const_declaration ::= IDENTIFIER COLON CONSTANT ASSIGNMENT const_types SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declaration",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // const_declarations_list ::= const_declarations_list const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declarations_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // const_declarations_list ::= const_declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("const_declarations_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarations ::= const_declarations_list record_declarations var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarations ::= const_declarations_list var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declarations ::= const_declarations_list record_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarations ::= const_declarations_list record_declarations var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarations ::= record_declarations var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarations ::= var_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarations ::= record_declarations subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarations ::= record_declarations var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarations ::= const_declarations_list subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarations ::= const_declarations_list var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarations ::= const_declarations_list record_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarations ::= subprograms_declaration_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarations ::= var_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declarations ::= record_declarations 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declarations ::= const_declarations_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS error NT$3 IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo("ERROR: Falta el parentesis de cierre"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // procedure_declaration ::= PROCEDURE IDENTIFIER error NT$2 CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$2 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo("ERROR: Falta el parentesis de apertura"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure_declaration ::= PROCEDURE error NT$1 OPENPARENTHESIS CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$1 ::= 
            {
              Object RESULT =null;
syntaxErrorManager.syntaxInfo("ERROR: Falta el identificador"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure_declaration ::= PROCEDURE IDENTIFIER OPENPARENTHESIS CLOSEPARENTHESIS IS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // axiom ::= procedure_declaration declarations BEGIN sentences_list error 
            {
              Axiom RESULT =null;
		syntaxErrorManager.syntaxFatalError("ERROR: Error en el end final"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // axiom ::= procedure_declaration declarations BEGIN sentences_list end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // axiom ::= procedure_declaration declarations BEGIN end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // axiom ::= procedure_declaration BEGIN sentences_list end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // axiom ::= procedure_declaration BEGIN end 
            {
              Axiom RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("axiom",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= NT$0 axiom 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int axleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int axright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Axiom ax = (Axiom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   		
  		
  		syntaxErrorManager.syntaxInfo ("Parsing process ended.");
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 
        syntaxErrorManager.syntaxInfo ("Starting parsing..."); 
  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

